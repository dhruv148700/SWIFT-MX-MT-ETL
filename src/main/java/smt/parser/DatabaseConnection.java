package smt.parser;

import com.prowidesoftware.swift.model.*;
import com.prowidesoftware.swift.utils.Lib;

import java.io.FileInputStream;
import java.io.IOException;
import java.sql.*;
import java.util.Properties;

import static smt.parser.BlockParsers.*;

public class DatabaseConnection {

  private static Connection getConnection() {
    Properties props = new Properties();

    try (FileInputStream input =
                 new FileInputStream("config/properties")) {
      props.load(input);
    } catch (IOException e) {
      e.printStackTrace();
    }

    final String URL = props.getProperty("RDS_URL");
    final String USER = props.getProperty("RDS_USER");
    final String PASSWORD = props.getProperty("RDS_PASSWORD");

    Connection connection = null;
    try {
      connection = DriverManager.getConnection(URL, USER, PASSWORD);
      System.out.println("Connection established successfully.");
    } catch (SQLException e) {
      e.printStackTrace();
      System.out.println("Failed to establish connection.");
    }
    return connection;
  }

  public static void closeConnection(Connection connection) {
    if (connection != null) {
      try {
        connection.close();
        System.out.println("Connection closed successfully.");
      } catch (SQLException e) {
        e.printStackTrace();
        System.out.println("Failed to close connection.");
      }
    }
  }

  private static int insertMessage(Connection connection, String type,
                                   String direction) throws SQLException {
    String query = "INSERT INTO messages(messageType, direction) VALUES (?, ?)";

    PreparedStatement preparedStatement = connection.prepareStatement(query,
            PreparedStatement.RETURN_GENERATED_KEYS);
    preparedStatement.setString(1, type);
    preparedStatement.setString(2, direction);

    preparedStatement.executeUpdate();

    // Retrieve the messageID generated by auto increment
    ResultSet result = preparedStatement.getGeneratedKeys();
    int generatedId = -1;
    if (result.next()) {
      generatedId = result.getInt(1);
    }
    return generatedId;
  }


  public static void main(String[] args) throws SQLException, IOException {

    SwiftMessage mt = SwiftMessage.parse(Lib.readResource("MT103-5.txt",
            null));

    String type = mt.getType();
    String direction = mt.getBlock2().isInput() ? "I" : "O";

    Connection connection = getConnection();

    // Insert message into DB
    int generatedId = insertMessage(connection, type, direction);

    if (generatedId == -1) {
      System.out.println("Message was not inserted.");
      System.exit(-1);
    }

    // Load block 1
    parseBlock1(connection, mt.getBlock1(), generatedId);

    if (direction.equals("I")) {
      // Load input block 2;
      parseInputBlock2(connection, (SwiftBlock2Input) mt.getBlock2(),
              generatedId);
    } else {
      // Load output block 2
      parseOutputBlock2(connection, (SwiftBlock2Output) mt.getBlock2(),
              generatedId);
    }

    // Load block 3
    parseBlock3(connection, mt.getBlock3(), generatedId);

    if (type.equals("103")) {
      parseMT103Block4(connection, mt.getBlock4(), generatedId);
    } else if (type.equals("202")) {
      parseMT202Block4(connection, mt.getBlock4(), generatedId);
    }

    if (mt.getBlock5() != null) {
      parseBlock5(connection, mt.getBlock5(), generatedId);
    }

    closeConnection(connection);
  }

}

